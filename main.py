import pickle
import telebot
from telebot import types

token = 
bot = telebot.TeleBot(token)

class Proekt:
    def __init__(self,nazvanie, stages = dict(), gotovnost = '–ù–µ –∑–∞–≤–µ—Ä—à—ë–Ω'):
        self.nazvanie = nazvanie
        self.stages = stages
        self.gotovnost = gotovnost

@bot.message_handler(commands=['whereami'])
def func(message):
    with open(str(message.chat.id) + 'whereami.pickle', 'rb') as f:
        whereami = pickle.load(f)
    bot.send_message(message.chat.id, text = str(whereami))


@bot.message_handler(commands=['start'])
def start(message):
    userid = str(message.chat.id)
    whereami = ''
    proekti = []
    with open(userid + 'proekti.pickle', 'wb') as f:
        pickle.dump(proekti, f, pickle.HIGHEST_PROTOCOL)
    with open(userid + 'whereami.pickle', 'wb') as f:
        pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
    zametki = dict()
    with open(userid + 'zametki.pickle', 'wb') as f:
        pickle.dump(zametki, f, pickle.HIGHEST_PROTOCOL)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_notes = types.KeyboardButton('üìù–ó–∞–º–µ—Ç–∫–∏')
    btn_projects = types.KeyboardButton("üß†üå™–ü—Ä–æ–µ–∫—Ç—ã")
    btn_help = types.KeyboardButton("üÜòhelp")
    markup.add(btn_notes,btn_projects,btn_help)
    bot.send_message(message.chat.id, text= ' !!!–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –ü–†–ò –ù–ê–ü–ò–°–ê–ù–ò–ò /start –í–°–ï –û–ë–ù–£–õ–ò–¢–°–Ø\n\n–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –≤–µ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç—ã.\n –î–ª—è –ø–æ–º–æ—â–∏ –Ω–∞–∂–º–∏—Ç–µ help \n \n Made by –ï–≥–æ—Ä –ó–∏–Ω–æ–≤—å–µ–≤ –∏ –ú–∞–∫—Å–∏–º –ú–æ—Å–∫–≤–∏–Ω',reply_markup=markup)
@bot.message_handler(commands=['üÜòhelp'])
def start_handler(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –≤–µ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç—ã.\n Made by –ï–≥–æ—Ä –ó–∏–Ω–æ–≤—å–µ–≤ –∏ –ú–∞–∫—Å–∏–º –ú–æ—Å–∫–≤–∏–Ω')

@bot.message_handler(content_types=['text'])
def func_btn_help(message):
    btn_edit_notes = types.KeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É")
    btn_mainmenu = types.KeyboardButton("üèö–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    btn_backnotes = types.KeyboardButton('–ù–∞–∑–∞–¥ –≤ –∑–∞–º–µ—Ç–∫–∏')
    btn_create_notes = types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É")
    btn_read_notes = types.KeyboardButton('–ü—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–º–µ—Ç–∫—É')
    btn_delete_notes = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
    btn_delete_all_notes = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏")
    btn_notes = types.KeyboardButton('üìù–ó–∞–º–µ—Ç–∫–∏')
    btn_projects = types.KeyboardButton("üß†üå™–ü—Ä–æ–µ–∫—Ç—ã")
    btn_create_project = types.KeyboardButton('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç')
    btn_read_project = types.KeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç')
    btn_delete_project = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç')
    btn_create_stage = types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —ç—Ç–∞–ø")
    btn_read_stage = types.KeyboardButton("–û—Ç–∫—Ä—ã—Ç—å —ç—Ç–∞–ø")
    btn_delete_stage = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å —ç—Ç–∞–ø")
    btn_status = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞')
    btn_back_projects = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ–µ–∫—Ç–∞–º")
    btn_help = types.KeyboardButton("üÜòhelp")
    btn_yes = types.KeyboardButton('–î–∞')
    btn_no = types.KeyboardButton('–ù–µ—Ç')
    userid = str(message.chat.id)
    with open(userid + 'whereami.pickle', 'rb') as f:
        whereami = pickle.load(f)

    if message.text == '–ù–∞–∑–∞–¥ –≤ –∑–∞–º–µ—Ç–∫–∏':
        whereami = 'zametki'
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(btn_create_notes, btn_read_notes, btn_delete_notes, btn_delete_all_notes, btn_mainmenu)
        bot.send_message(message.chat.id, text='–ó–∞–º–µ—Ç–∫–∏', reply_markup=markup)
        with open(userid + 'whereami.pickle', 'wb') as f:
            pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
        with open(userid + 'zametki.pickle', 'rb') as f:
            zametki = pickle.load(f)
        if zametki == {}:
            bot.send_message(message.chat.id, text='–ó–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç', reply_markup=markup)
        else:
            stroka = '--------------\n'
            for i in zametki.keys():
                stroka += str(i + '\n')
            stroka += '--------------'
            whereami = 'zametki'
            with open(userid + 'whereami.pickle', 'wb') as f:
                pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
            bot.send_message(message.chat.id, text=stroka, reply_markup=markup)
    if message.text == 'üèö–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(btn_notes, btn_projects, btn_help)
        whereami = 'mainmenu'
        with open(userid + 'whereami.pickle', 'wb') as f:
            pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
        bot.send_message(message.chat.id, text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ–µ–∫—Ç–∞–º':
        whereami = 'proekti'
        with open(userid + 'whereami.pickle', 'wb') as f:
            pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)

    if whereami != 'status1' and whereami !='status2' and whereami != 'stage_delete1' and whereami != 'stage_delete2' and whereami != 'stage_read' and whereami != 'stage_create2' and whereami != 'stage_create1' and whereami != 'proekti_read2' and whereami != 'proekti_read1' and whereami != 'proekti_delete1' and whereami != 'proekti_delete2' and whereami != 'proekti_create1' and whereami != 'zametki_add1' and whereami != 'zametki_read1' and whereami != 'zametki_add2' and whereami != 'zametki_read2' and whereami != 'zametki_edit' and whereami != 'zametki_delete1' and whereami != 'zametki_delete2' and whereami != 'zametki_delete_all':
        if message.text == 'üÜòhelp':
            bot.send_message(message.chat.id,'–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –≤–µ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç—ã.\n Made by –ï–≥–æ—Ä –ó–∏–Ω–æ–≤—å–µ–≤ –∏ –ú–∞–∫—Å–∏–º –ú–æ—Å–∫–≤–∏–Ω')
        if message.text == '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç' and whereami == 'proekti':
            whereami = 'proekti_read1'
            with open(userid + 'proekti.pickle', 'rb') as f:
                proekti = pickle.load(f)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(btn_mainmenu, btn_create_project)
            if len(proekti) == 0:
                bot.send_message(message.chat.id, text='–ü—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ—Ç, —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ—á–µ–≥–æ!', reply_markup=markup)
            else:
                with open(userid + 'whereami.pickle', 'wb') as f:
                    pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
                bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', reply_markup=markup)


        if message.text == 'üìù–ó–∞–º–µ—Ç–∫–∏':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(btn_create_notes, btn_read_notes, btn_delete_notes, btn_delete_all_notes, btn_mainmenu)
            bot.send_message(message.chat.id, text='–ó–∞–º–µ—Ç–∫–∏', reply_markup=markup)
            with open(userid + 'zametki.pickle', 'rb') as f:
                zametki = pickle.load(f)
            if zametki == {}:
                bot.send_message(message.chat.id, text='–ó–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç', reply_markup=markup)
            else:
                stroka = '--------------\n'
                for i in zametki.keys():
                    stroka += str(i +'\n')
                stroka += '--------------'
                whereami = 'zametki'
                with open(userid + 'whereami.pickle', 'wb') as f:
                    pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
                bot.send_message(message.chat.id, text=stroka, reply_markup=markup)
        if message.text == 'üß†üå™–ü—Ä–æ–µ–∫—Ç—ã' or message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ–µ–∫—Ç–∞–º':
            whereami = 'proekti'
            with open(userid + 'whereami.pickle', 'wb') as f:
                pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
            with open(userid + 'proekti.pickle', 'rb') as f:
                proekti = pickle.load(f)
            if len(proekti) == 0:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add(btn_mainmenu,btn_create_project)
                bot.send_message(message.chat.id, text='–ü—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ—Ç', reply_markup=markup)
            else:
                stroka = '--------------\n'
                for i in range(len(proekti)):
                    stroka += str(proekti[i].nazvanie) + '\n' + '–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ' + str(proekti[i].gotovnost) + '\n\n'
                stroka += '--------------\n'
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add(btn_mainmenu, btn_create_project, btn_read_project, btn_status, btn_delete_project)
                bot.send_message(message.chat.id, text=stroka, reply_markup=markup)
        if message.text == '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç':
            whereami = 'proekti_create1'
            with open(userid + 'whereami.pickle', 'wb') as f:
                pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(btn_mainmenu, btn_back_projects)
            bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', reply_markup=markup)
        if message.text == '–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç':
            whereami = 'proekti_delete1'
            with open(userid + 'whereami.pickle', 'wb') as f:
                pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(btn_mainmenu, btn_back_projects)
            bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.', reply_markup=markup)
        if message.text == '–ü—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–º–µ—Ç–∫—É':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(btn_mainmenu, btn_backnotes)
            whereami = 'zametki_read1'
            with open(userid + 'whereami.pickle', 'wb') as f:
                pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
            bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏', reply_markup=markup)
        if message.text == '–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(btn_mainmenu, btn_backnotes)
            whereami = 'zametki_delete1'
            with open(userid + 'whereami.pickle', 'wb') as f:
                pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
            bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏', reply_markup=markup)
        if message.text == '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(btn_yes, btn_no)
            whereami = 'zametki_delete_all'
            with open(userid + 'whereami.pickle', 'wb') as f:
                pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
            bot.send_message(message.chat.id, text='–í–´ –•–û–¢–ò–¢–ï –£–î–ê–õ–ò–¢–¨ –í–°–ï –ó–ê–ú–ï–¢–ö–ò!\n–í—ã —É–≤–µ—Ä–µ–Ω—ã?', reply_markup=markup)
        if message.text == '–°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É':
            whereami = 'zametki_add1'
            with open(userid + 'whereami.pickle', 'wb') as f:
                pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(btn_mainmenu, btn_backnotes)
            bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏', reply_markup=markup)
        if message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞':
            whereami = 'status1'
            with open(userid + 'whereami.pickle', 'wb') as f:
                pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(btn_mainmenu, btn_back_projects)
            bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', reply_markup=markup)
    elif whereami == 'proekti_read1':
        nazvanie = message.text
        with open(userid + 'proekti.pickle', 'rb') as f:
            proekti = pickle.load(f)
        flag = 0
        for i in range(len(proekti)):
            if nazvanie == proekti[i].nazvanie:
                flag = 1

        if flag == 1:
            with open(userid + 'nazvanie.pickle', 'wb') as f:
                pickle.dump(nazvanie, f, pickle.HIGHEST_PROTOCOL)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(btn_mainmenu, btn_back_projects,btn_create_stage ,btn_read_stage, btn_delete_stage)
            for i in range(len(proekti)):
                if nazvanie == proekti[i].nazvanie:
                    number = i
                    break
            stroka = '--------------\n'
            for i in proekti[number].stages.keys():
                stroka += str(i) + '\n'
            stroka += '--------------'
            whereami = 'proekti_read2'
            with open(userid + 'whereami.pickle', 'wb') as f:
                pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
            if stroka == '--------------\n--------------':
                with open(userid + 'number.pickle', 'wb') as f:
                    pickle.dump(number, f, pickle.HIGHEST_PROTOCOL)
                bot.send_message(message.chat.id, text='--------------\n–≠—Ç–∞–ø–æ–≤ –Ω–µ—Ç\n--------------', reply_markup=markup)
            else:
                with open(userid + 'number.pickle', 'wb') as f:
                    pickle.dump(number, f, pickle.HIGHEST_PROTOCOL)
                bot.send_message(message.chat.id, text=stroka, reply_markup=markup)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(btn_mainmenu, btn_back_projects)
            bot.send_message(message.chat.id, text='–¢–∞–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.', reply_markup=markup)

    elif whereami == 'proekti_read2' and message.text == '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —ç—Ç–∞–ø':
        whereami = 'stage_create1'
        with open(userid + 'whereami.pickle', 'wb') as f:
            pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(btn_mainmenu, btn_back_projects)
        bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞.', reply_markup=markup)
    elif message.text == '–û—Ç–∫—Ä—ã—Ç—å —ç—Ç–∞–ø' and whereami == 'proekti_read2':
        whereami = 'stage_read'
        with open(userid + 'whereami.pickle', 'wb') as f:
            pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(btn_mainmenu, btn_back_projects)
        bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞', reply_markup=markup)
    elif whereami == 'status1':

        flag = 0
        with open(userid + 'proekti.pickle', 'rb') as f:
            proekti = pickle.load(f)
        for i in range(len(proekti)):
            if message.text == proekti[i].nazvanie:
                flag = 1
                break
        if flag == 1:
            whereami = 'status2'
            nazvanie = message.text
            with open(userid + 'nazvanie.pickle', 'wb') as f:
                pickle.dump(nazvanie, f, pickle.HIGHEST_PROTOCOL)
            with open(userid + 'whereami.pickle', 'wb') as f:
                pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(btn_mainmenu, btn_back_projects)
            bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç', reply_markup=markup)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(btn_mainmenu, btn_back_projects)
            bot.send_message(message.chat.id, text='–¢–∞–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ—Ç.', reply_markup=markup)
    elif whereami == 'status2':
        whereami = 'proekti'
        with open(userid + 'whereami.pickle', 'wb') as f:
            pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
        with open(userid + 'proekti.pickle', 'rb') as f:
            proekti = pickle.load(f)
        with open(userid + 'nazvanie.pickle', 'rb') as f:
            nazvanie = pickle.load(f)
        for i in range(len(proekti)):
            if nazvanie == proekti[i].nazvanie:
                proekti[i].gotovnost = message.text
        with open(userid + 'proekti.pickle', 'wb') as f:
            pickle.dump(proekti, f, pickle.HIGHEST_PROTOCOL)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(btn_mainmenu, btn_back_projects)
        bot.send_message(message.chat.id, text='–í—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!', reply_markup=markup)

    elif whereami == 'stage_create1':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        nazvanie_stage = message.text
        with open(userid + 'proekti.pickle', 'rb') as f:
            proekti = pickle.load(f)
        with open(userid + 'number.pickle', 'rb') as f:
            number = pickle.load(f)
        if proekti == []:
            number = 0
        if nazvanie_stage not in proekti[number].stages.keys():
            proekti[number].stages[nazvanie_stage] = ''
            whereami = 'stage_create2'
            with open(userid + 'whereami.pickle', 'wb') as f:
                pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
            with open(userid + 'nazvanie_stage.pickle', 'wb') as f:
                pickle.dump(nazvanie_stage, f, pickle.HIGHEST_PROTOCOL)
            with open(userid + 'proekti.pickle', 'wb') as f:
                pickle.dump(proekti, f, pickle.HIGHEST_PROTOCOL)
            markup.add(btn_mainmenu, btn_back_projects)
            bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.', reply_markup=markup)
        else:
            markup.add(btn_mainmenu, btn_back_projects)
            bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.', reply_markup=markup)
    elif whereami == 'stage_create2':
        with open(userid + 'proekti.pickle', 'rb') as f:
            proekti = pickle.load(f)
        with open(userid + 'number.pickle', 'rb') as f:
            number = pickle.load(f)
        with open(userid + 'nazvanie_stage.pickle', 'rb') as f:
            nazvanie_stage = pickle.load(f)
        proekti[number].stages[nazvanie_stage] = str(message.text)
        with open(userid + 'whereami.pickle', 'wb') as f:
            pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
        with open(userid + 'nazvanie_stage.pickle', 'wb') as f:
            pickle.dump(nazvanie_stage, f, pickle.HIGHEST_PROTOCOL)
        with open(userid + 'proekti.pickle', 'wb') as f:
            pickle.dump(proekti, f, pickle.HIGHEST_PROTOCOL)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(btn_mainmenu, btn_back_projects)
        bot.send_message(message.chat.id, text='–í—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!', reply_markup=markup)

    elif message.text == '–£–¥–∞–ª–∏—Ç—å —ç—Ç–∞–ø':
        whereami = 'stage_delete1'
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(btn_mainmenu, btn_back_projects)
        with open(userid + 'whereami.pickle', 'wb') as f:
            pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
        bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.', reply_markup=markup)

    elif whereami == 'stage_delete1':
        nazvanie_stage = message.text
        with open(userid + 'proekti.pickle', 'rb') as f:
            proekti = pickle.load(f)
        with open(userid + 'number.pickle', 'rb') as f:
            number = pickle.load(f)
        if nazvanie_stage in proekti[number].stages.keys():
            whereami = 'stage_delete2'
            with open(userid + 'whereami.pickle', 'wb') as f:
                pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
            with open(userid + 'nazvanie_stage.pickle', 'wb') as f:
                pickle.dump(nazvanie_stage, f, pickle.HIGHEST_PROTOCOL)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(btn_yes, btn_no)
            bot.send_message(message.chat.id, text='–í—ã —É–≤–µ—Ä–µ–Ω—ã?', reply_markup=markup)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(btn_mainmenu, btn_back_projects)
            bot.send_message(message.chat.id, text='–¢–∞–∫–æ–≥–æ —ç—Ç–∞–ø–∞ –Ω–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.', reply_markup=markup)
    elif whereami == 'stage_delete2' and message.text == '–î–∞':
        with open(userid + 'proekti.pickle', 'rb') as f:
            proekti = pickle.load(f)
        with open(userid + 'nazvanie_stage.pickle', 'rb') as f:
            nazvanie_stage = pickle.load(f)
        with open(userid + 'number.pickle', 'rb') as f:
            number = pickle.load(f)
        del proekti[number].stages[nazvanie_stage]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(btn_mainmenu, btn_back_projects)
        whereami = 'proekti'
        with open(userid + 'whereami.pickle', 'wb') as f:
            pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
        with open(userid + 'proekti.pickle', 'wb') as f:
            pickle.dump(proekti, f, pickle.HIGHEST_PROTOCOL)
        bot.send_message(message.chat.id, text='–≠—Ç–∞–ø –±—ã–ª —É–¥–∞–ª–µ–Ω', reply_markup=markup)
    elif whereami == 'stage_delete2' and message.text == '–ù–µ—Ç':
        whereami = 'proekti'
        with open(userid + 'whereami.pickle', 'wb') as f:
            pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(btn_mainmenu, btn_back_projects)
        bot.send_message(message.chat.id, text='–•–æ—Ä–æ—à–æ, —á—Ç–æ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏!', reply_markup=markup)

    elif whereami == 'proekti_delete1':
        nazvanie = message.text
        flag = 0
        with open(userid + 'proekti.pickle', 'rb') as f:
            proekti = pickle.load(f)
        for i in range(len(proekti)):
            if nazvanie == proekti[i].nazvanie:
                flag = 1
        if flag == 1:
            whereami = 'proekti_delete2'
            with open(userid + 'whereami.pickle', 'wb') as f:
                pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
            with open(userid + 'nazvanie.pickle', 'wb') as f:
                pickle.dump(nazvanie, f, pickle.HIGHEST_PROTOCOL)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(btn_yes, btn_no)
            bot.send_message(message.chat.id, text='–í—ã —É–≤–µ—Ä–µ–Ω—ã?', reply_markup=markup)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(btn_mainmenu, btn_back_projects)
            bot.send_message(message.chat.id, text='–¢–∞–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.', reply_markup=markup)
    elif whereami == 'proekti_delete2' and message.text == '–î–∞':
        with open(userid + 'nazvanie.pickle', 'rb') as f:
            nazvanie = pickle.load(f)
        whereami = 'proekti'
        with open(userid + 'whereami.pickle', 'wb') as f:
            pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
        with open(userid + 'proekti.pickle', 'rb') as f:
            proekti = pickle.load(f)
        for i in range(len(proekti)):
            if proekti[i].nazvanie == nazvanie:
                proekti.pop(i)
                break
        with open(userid + 'proekti.pickle', 'wb') as f:
            pickle.dump(proekti, f, pickle.HIGHEST_PROTOCOL)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(btn_mainmenu, btn_back_projects)
        bot.send_message(message.chat.id, text='–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!', reply_markup=markup)
    elif whereami == 'proekti_delete2' and message.text == '–ù–µ—Ç':
        whereami = 'proekti'
        with open(userid + 'whereami.pickle', 'wb') as f:
            pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(btn_back_projects)
        bot.send_message(message.chat.id, text='–•–æ—Ä–æ—à–æ, —á—Ç–æ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏!', reply_markup=markup)

    elif whereami == 'proekti_create1':
        proekt = Proekt(message.text)
        nazvanie = message.text
        flag = 0
        with open(userid + 'proekti.pickle', 'rb') as f:
            proekti = pickle.load(f)
        for i in range(len(proekti)):
            if nazvanie == proekti[i].nazvanie:
                flag = 1

        if flag == 1:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(btn_mainmenu, btn_back_projects)
            bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ', reply_markup=markup)
        else:
            proekti.append(proekt)
            whereami = 'proekti'
            with open(userid + 'proekti.pickle', 'wb') as f:
                pickle.dump(proekti, f, pickle.HIGHEST_PROTOCOL)
            with open(userid + 'whereami.pickle', 'wb') as f:
                pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(btn_mainmenu, btn_back_projects)
            bot.send_message(message.chat.id, text='–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', reply_markup=markup)

    elif whereami == 'zametki_add1':
        with open(userid + 'zametki.pickle', 'rb') as f:
            zametki = pickle.load(f)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        if message.text in zametki.keys():
            markup.add(btn_mainmenu, btn_backnotes)
            bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ', reply_markup=markup)
        else:
            zametki[message.text] = ''
            whereami = 'zametki_add2'
            nazvanie = message.text
            with open(userid + 'nazvanie.pickle', 'wb') as f:
                pickle.dump(nazvanie, f, pickle.HIGHEST_PROTOCOL)
            with open(userid + 'zametki.pickle', 'wb') as f:
                pickle.dump(zametki, f, pickle.HIGHEST_PROTOCOL)
            with open(userid + 'whereami.pickle', 'wb') as f:
                pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
            bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç')
    elif whereami == 'zametki_add2':
        whereami = 'zametki'
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(btn_notes)
        with open(userid + 'whereami.pickle', 'wb') as f:
            pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
        with open(userid + 'zametki.pickle', 'rb') as f:
            zametki = pickle.load(f)
        with open(userid + 'nazvanie.pickle', 'rb') as f:
            nazvanie = pickle.load(f)
        zametki[nazvanie] = message.text
        with open(userid + 'zametki.pickle', 'wb') as f:
            pickle.dump(zametki, f, pickle.HIGHEST_PROTOCOL)
        bot.send_message(message.chat.id, text='–ó–∞–º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞', reply_markup=markup)
    elif whereami == 'zametki_read1':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        with open(userid + 'zametki.pickle', 'rb') as f:
            zametki = pickle.load(f)
        if message.text in zametki.keys():
            whereami = 'zametki_read2'
            markup.add(btn_backnotes, btn_edit_notes)
            nazvanie = message.text
            with open(userid + 'nazvanie.pickle', 'wb') as f:
                pickle.dump(nazvanie, f, pickle.HIGHEST_PROTOCOL)
            with open(userid + 'whereami.pickle', 'wb') as f:
                pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
            bot.send_message(message.chat.id, text=zametki[message.text], reply_markup=markup)
        else:
            markup.add(btn_mainmenu,btn_backnotes)
            bot.send_message(message.chat.id, text='–¢–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.', reply_markup=markup)
    elif whereami == 'zametki_read2':
        if message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É':
            whereami = 'zametki_edit'
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(btn_backnotes)
            with open(userid + 'whereami.pickle', 'wb') as f:
                pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
            bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç', reply_markup=markup)
    elif whereami == 'zametki_edit':
        with open(userid + 'nazvanie.pickle', 'rb') as f:
            nazvanie = pickle.load(f)
        with open(userid + 'zametki.pickle', 'rb') as f:
            zametki = pickle.load(f)
        zametki[nazvanie] = message.text
        with open(userid + 'zametki.pickle', 'wb') as f:
            pickle.dump(zametki, f, pickle.HIGHEST_PROTOCOL)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(btn_backnotes)
        bot.send_message(message.chat.id, text='–í—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ', reply_markup=markup)
    elif whereami == 'zametki_delete1':
        whereami = 'zametki_delete2'
        with open(userid + 'whereami.pickle', 'wb') as f:
            pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
        nazvanie = message.text
        with open(userid + 'nazvanie.pickle', 'wb') as f:
            pickle.dump(nazvanie, f, pickle.HIGHEST_PROTOCOL)
        with open(userid + 'zametki.pickle', 'rb') as f:
            zametki = pickle.load(f)
        if nazvanie not in zametki.keys():
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(btn_backnotes)
            whereami = 'zametki'
            with open(userid + 'whereami.pickle', 'wb') as f:
                pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
            bot.send_message(message.chat.id, text='–¢–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', reply_markup=markup)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(btn_yes, btn_no)
            bot.send_message(message.chat.id, text='–í—ã —É–≤–µ—Ä–µ–Ω—ã?', reply_markup=markup)
    elif whereami == 'zametki_delete2' and message.text == '–î–∞':
        with open(userid + 'nazvanie.pickle', 'rb') as f:
            nazvanie = pickle.load(f)
        with open(userid + 'zametki.pickle', 'rb') as f:
            zametki = pickle.load(f)
        del zametki[nazvanie]
        with open(userid + 'zametki.pickle', 'wb') as f:
            pickle.dump(zametki, f, pickle.HIGHEST_PROTOCOL)
        whereami = 'zametki'
        with open(userid + 'whereami.pickle', 'wb') as f:
            pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(btn_backnotes)
        bot.send_message(message.chat.id, text='–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!', reply_markup=markup)
    elif whereami == 'zametki_delete2' and message.text == '–ù–µ—Ç':
        whereami = 'zametki'
        with open(userid + 'whereami.pickle', 'wb') as f:
            pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(btn_backnotes)
        bot.send_message(message.chat.id, text='–•–æ—Ä–æ—à–æ, —á—Ç–æ –í—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏', reply_markup=markup)
    elif whereami == 'zametki_delete_all' and message.text == '–î–∞':
        zametki = dict()
        with open(userid + 'zametki.pickle', 'wb') as f:
            pickle.dump(zametki, f, pickle.HIGHEST_PROTOCOL)
        whereami = 'mainmenu'
        with open(userid + 'whereami.pickle', 'wb') as f:
            pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(btn_mainmenu)
        bot.send_message(message.chat.id, text='–í—Å–µ –∑–∞–º–µ—Ç–∫–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã', reply_markup=markup)
    elif whereami == 'zametki_delete_all' and message.text == '–ù–µ—Ç':
        whereami = 'zametki'
        with open(userid + 'whereami.pickle', 'wb') as f:
            pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(btn_backnotes)
        bot.send_message(message.chat.id, text='–•–æ—Ä–æ—à–æ, —á—Ç–æ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏!', reply_markup=markup)
    elif whereami == 'stage_read':
        nazvanie_stage = message.text
        with open(userid + 'proekti.pickle', 'rb') as f:
            proekti = pickle.load(f)
        with open(userid + 'number.pickle', 'rb') as f:
            number = pickle.load(f)
        if nazvanie_stage in proekti[number].stages.keys():
            whereami = 'proekti'
            with open(userid + 'whereami.pickle', 'wb') as f:
                pickle.dump(whereami, f, pickle.HIGHEST_PROTOCOL)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(btn_mainmenu, btn_back_projects)
            bot.send_message(message.chat.id, text=proekti[number].stages[nazvanie_stage], reply_markup=markup)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(btn_mainmenu, btn_back_projects)
            bot.send_message(message.chat.id, text='–¢–∞–∫–æ–≥–æ —ç—Ç–∞–ø–∞ –Ω–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.', reply_markup=markup)


bot.infinity_polling(timeout=10, long_polling_timeout = 5)
